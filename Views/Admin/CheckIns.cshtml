@model CheckInsPaginatedViewModel
@{
    ViewData["Title"] = "Check-Ins Report";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Check-Ins Report</h1>
    <div>
        @if (User.IsInRole("Admin"))
        {
            <button type="button" class="btn btn-success me-2" onclick="showAdminManualCheckInModal()">
                <i class="bi bi-person-plus"></i> Create Manual Check-In
            </button>
        }
        <div class="text-muted">
            <i class="bi bi-info-circle"></i> All times shown in KSA Time (UTC+3)
            <br><small>Current Time: @KSADateTimeExtensions.GetKSANow().ToString("yyyy-MM-dd HH:mm:ss") KSA</small>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-body">
        <form method="get" asp-action="CheckIns" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">From Date <small class="text-muted">(KSA)</small></label>
                <input type="date" name="fromDate" class="form-control"
                       value="@Model.FromDate?.ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label class="form-label">To Date <small class="text-muted">(KSA)</small></label>
                <input type="date" name="toDate" class="form-control" value="@Model.ToDate?.ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label class="form-label">Phone Number</label>
                <input type="text" name="phoneNumber" class="form-control"
                       value="@Model.PhoneNumber" placeholder="Enter phone number">
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Finance"))
            {
                <div class="col-md-3">
                    <label class="form-label">Branch</label>
                    <select name="branchId" class="form-select">
                        <option value="">All Branches</option>
                        @foreach (var branch in Model.Branches)
                        {
                            <option value="@branch.Id"
                                    selected="@(Model.BranchId == branch.Id ? "selected" : null)">@branch.Name</option>
                        }
                    </select>
                </div>
            }

            <input type="hidden" name="pageSize" id="pageSize"/>
            <input type="hidden" name="page" id="page"/>
            <div class="col-12">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-search"></i> Filter
                    </button>
                    <button type="submit" formaction="@Url.Action("ExportCheckIns")" class="btn btn-success">
                        <i class="bi bi-file-earmark-excel"></i> Export
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="resetForm()">
                        <i class="bi bi-x-circle"></i> Reset
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <!-- Pagination Info -->
        @if (Model.CheckIns.TotalItems > 0)
        {
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="text-muted">
                    <small>
                        Showing @Model.CheckIns.StartIndex - @Model.CheckIns.EndIndex of @Model.CheckIns.TotalItems check-ins
                    </small>
                </div>
                <div class="d-flex align-items-center">
                    <label class="form-label me-2 mb-0">Page size:</label>
                    <select class="form-select form-select-sm" id="page-select" style="width: auto;"
                            onchange="changePageSize(this.value)">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        }

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                <tr>
                    <th>End User</th>
                    <th>Phone</th>
                    <th>Branch</th>
                    <th>Date <small class="text-muted">(KSA)</small></th>
                    <th>Time <small class="text-muted">(KSA)</small></th>
                    <th>Court</th>
                    <th>Play Duration</th>
                    <th>Play Start Time <small class="text-muted">(KSA)</small></th>
                    <th>Attended</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var checkIn in Model.CheckIns.Items)
                {
                    <tr data-checkin-id="@checkIn.Id">
                        <td>
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(checkIn.EndUser.ImageUrl))
                                {
                                    <img src="@checkIn.EndUser.ImageUrl" alt="@checkIn.EndUser.Name"
                                         class="rounded-circle me-2"
                                         style="width: 30px; height: 30px; object-fit: cover;">
                                }
                                <span>@checkIn.EndUser.Name</span>
                            </div>
                        </td>
                        <td>@checkIn.EndUser.PhoneNumber</td>
                        <td>@checkIn.Branch.Name</td>
                        <td>@checkIn.CheckInDateTime.ToKSATime().ToString("yyyy-MM-dd")</td>
                        <td>@checkIn.CreatedAt.ToKSATime().ToString("HH:mm:ss")</td>
                        <td>
                            @if (checkIn.BranchCourtId.HasValue)
                            {
                                <span class="badge bg-success">@checkIn.BranchCourt.CourtName</span>
                            }
                            else
                            {
                                if (User.IsInRole("Admin"))
                                {
                                    <span class="badge bg-warning">Update Court Number</span>
                                    <span class="badge bg-warning">(Old is @checkIn.CourtName)</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">@checkIn.CourtName</span>
                                }
                            }
                        </td>
                        <td>
                            @if (checkIn.PlayDuration.HasValue)
                            {
                                <span>@((int)checkIn.PlayDuration.Value.TotalMinutes) min</span>
                            }
                            else
                            {
                                <span class="text-muted">Not Set</span>
                            }
                        </td>
                        <td>
                            @if (checkIn.PlayStartTime.HasValue)
                            {
                                <span>@checkIn.PlayStartTime.Value.ToKSATime().ToString("HH:mm:ss")</span>
                            }
                            else
                            {
                                <span class="text-muted">Not Set</span>
                            }
                        </td>
                        <td>
                            @if (checkIn.PlayerAttended)
                            {
                                <span class="badge bg-success"><i class="bi bi-check-circle"></i> Yes</span>
                            }
                            else
                            {
                                <span class="badge bg-warning"><i class="bi bi-x-circle"></i> No</span>
                            }
                        </td>
                        <td>
                            @if (User.IsInRole("Admin"))
                            {
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-primary btn-sm"
                                            onclick="showEditCheckInModal(@checkIn.Id,
                                            '@Html.Raw(checkIn.EndUser.Name)',
                                            '@Html.Raw(checkIn.CourtName)',
                                            '@(checkIn.PlayDuration?.TotalMinutes ?? 0)',
                                            '@checkIn.PlayStartTime?.ToKSATime().ToString("HH:mm")'
                                            ,'@Html.Raw(checkIn.Notes)'
                                            ,@Json.Serialize(checkIn.PlayerAttended),
                                            '@checkIn.CheckInDateTime.ToKSATime().ToString("yyyy-MM-dd")',
                                            @checkIn.BranchId,
                                            @checkIn.BranchCourtId)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm"
                                            onclick="deleteCheckIn(@checkIn.Id, '@Html.Raw(checkIn.EndUser.Name)')">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        @if (!Model.CheckIns.Items.Any())
        {
            <div class="text-center text-muted py-5">
                <i class="bi bi-list-check fs-1 mb-3"></i>
                <h5>No Check-Ins Found</h5>
                <p>No check-ins found for the selected criteria.</p>
            </div>
        }

        <!-- Pagination Controls -->
        @if (Model.CheckIns.TotalPages > 1)
        {
            <nav aria-label="Check-ins pagination" class="mt-4">
                <ul class="pagination justify-content-center">
                    <!-- First Page -->
                    @if (Model.CheckIns.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@GetPageUrl(1)">
                                <i class="bi bi-chevron-double-left"></i>
                            </a>
                        </li>
                    }

                    <!-- Previous Page -->
                    @if (Model.CheckIns.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@GetPageUrl(Model.CheckIns.CurrentPage - 1)">
                                <i class="bi bi-chevron-left"></i>
                            </a>
                        </li>
                    }

                    <!-- Page Numbers -->
                    @{
                        var startPage = Math.Max(1, Model.CheckIns.CurrentPage - 2);
                        var endPage = Math.Min(Model.CheckIns.TotalPages, Model.CheckIns.CurrentPage + 2);
                    }

                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@GetPageUrl(1)">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    @for (var pageNumber = startPage; pageNumber <= endPage; pageNumber++)
                    {
                        <li class="page-item @(pageNumber == Model.CheckIns.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@GetPageUrl(pageNumber)">
                                @pageNumber
                            </a>
                        </li>
                    }

                    @if (endPage < Model.CheckIns.TotalPages)
                    {
                        @if (endPage < Model.CheckIns.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }

                        <li class="page-item">
                            <a class="page-link"
                               href="@GetPageUrl(Model.CheckIns.TotalPages)">@Model.CheckIns.TotalPages</a>
                        </li>
                    }

                    <!-- Next Page -->
                    @if (Model.CheckIns.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@GetPageUrl(Model.CheckIns.CurrentPage + 1)">
                                <i class="bi bi-chevron-right"></i>
                            </a>
                        </li>
                    }

                    <!-- Last Page -->
                    @if (Model.CheckIns.CurrentPage < Model.CheckIns.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@GetPageUrl(Model.CheckIns.TotalPages)">
                                <i class="bi bi-chevron-double-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }

        @if (Model.CheckIns.Items.Any())
        {
            <div class="mt-3 text-muted">
                <small>
                    <i class="bi bi-info-circle"></i>
                    Showing @Model.CheckIns.StartIndex - @Model.CheckIns.EndIndex of @Model.CheckIns.TotalItems check-in(s).
                    All times displayed in KSA Time (UTC+3).
                </small>
            </div>
        }
    </div>
</div>

<partial name="Components/_CheckInModal" model="@("edit", true, string.Empty)"/>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete the check-in for <strong id="deleteUserName"></strong>?</p>
                <input type="hidden" id="deleteCheckInId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteCheckIn()">
                    <i class="bi bi-trash"></i> Delete Check-In
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add the manual check-in modal after the existing modals -->
<!-- Admin Manual Check-In Modal -->
@if (User.IsInRole("Admin"))
{
    <div class="modal fade" id="adminManualCheckInModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-person-plus"></i> Create Manual Check-In
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="adminManualCheckInForm">
                        <!-- User Lookup Section -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h6 class="mb-0">Step 1: Find User</h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Phone Number *</label>
                                            <input type="tel" id="manualPhoneNumber" class="form-control" required>
                                            <small id="manualPhoneNumberError" class="text-danger"></small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Check-In Date *</label>
                                            <input type="date" id="manualCheckInDate" class="form-control" required>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Branch *</label>
                                            <select id="manualBranchId" class="form-select" required onchange="">
                                                <option value="">Select Branch</option>
                                                @foreach (var branch in Model.Branches)
                                                {
                                                    <option value="@branch.Id">@branch.Name</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-grid">
                                    <button type="button" class="btn btn-primary"
                                            onclick="validateUserForManualCheckIn()">
                                        <i class="bi bi-search"></i> Find & Validate User
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- User Information Display -->
                        <div id="userInfoSection" class="card mb-4 d-none">
                            <div class="card-header bg-success text-white">
                                <h6 class="mb-0">
                                    <i class="bi bi-check-circle"></i> User Found & Validated
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div id="manualUserImage" class="me-3">
                                        <!-- User image will be populated here -->
                                    </div>
                                    <div>
                                        <h5 id="manualUserName" class="mb-1"><!-- User name --></h5>
                                        <p class="mb-1"><strong>Phone:</strong> <span id="manualUserPhone"></span></p>
                                        <small class="text-muted">
                                            Subscription: <span id="manualUserSubscription"></span>
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Check-In Details Section -->
                        <div id="checkInDetailsSection" class="card d-none">
                            <div class="card-header">
                                <h6 class="mb-0">Step 2: Check-In Details</h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Court Name/Number</label>
                                            <select id="manualCourtName" class="form-control"
                                                    required="required"></select>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Play Duration (minutes)</label>
                                            <select id="manualPlayDuration" class="form-select">
                                                <option value="">Not specified</option>
                                                <option value="60">60 minutes</option>
                                                <option value="90" selected>90 minutes</option>
                                                <option value="120">120 minutes</option>
                                                <option value="150">150 minutes</option>
                                                <option value="180">180 minutes</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Play Start Time</label>
                                            <input type="time" id="manualPlayStartTime" class="form-control">
                                            <small class="text-muted">Time in KSA timezone</small>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="manualPlayerAttended"
                                                   checked>
                                            <label class="form-check-label" for="manualPlayerAttended">
                                                <i class="bi bi-person-check"></i> Player Attended
                                            </label>
                                        </div>
                                        <small class="text-muted">Uncheck if player did not show up (will issue
                                            warning)</small>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Notes</label>
                                            <textarea id="manualNotes" class="form-control" rows="2"
                                                      placeholder="Additional notes (optional)"
                                                      maxlength="200"></textarea>
                                        </div>
                                    </div>
                                </div>

                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle"></i>
                                    <strong>Manual Check-In:</strong> This will create a check-in record for the
                                    specified date and time.
                                    Make sure all details are accurate before proceeding.
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="createManualCheckInBtn" class="btn btn-success d-none"
                            onclick="submitManualCheckIn()">
                        <i class="bi bi-check-circle"></i> Create Check-In
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@functions {

    public string GetPageUrl(
        int page)
    {
        var routeValues = new RouteValueDictionary
        {
            ["page"] = page,
            ["pageSize"] = Model.CheckIns.PageSize
        };

        if (Model.FromDate.HasValue)
            routeValues["fromDate"] = Model.FromDate.Value.ToString("yyyy-MM-dd");

        if (Model.ToDate.HasValue)
            routeValues["toDate"] = Model.ToDate.Value.ToString("yyyy-MM-dd");

        if (Model.BranchId.HasValue)
            routeValues["branchId"] = Model.BranchId.Value;

        if (!string.IsNullOrWhiteSpace(Model.PhoneNumber))
            routeValues["phoneNumber"] = Model.PhoneNumber;

        return Url.Action("CheckIns", routeValues);
    }

}

@section Styles
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/intl-tel-input@25.8.3/build/css/intlTelInput.css">
    <style>
        .iti{
            display: block;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/intl-tel-input@25.8.3/build/js/intlTelInput.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/18.2.1/js/utils.js"></script>
    <script>
        function changePageSize(pageSize) {
            const url = new URL(window.location);
            url.searchParams.set('pageSize', pageSize);
            url.searchParams.set('page', '1');
            window.location.href = url.toString();
        }

        function resetForm() {
            window.location.href = '@Url.Action("CheckIns")';
        }

        function showEditCheckInModal(checkInId,
                                      customerName,
                                      courtName,
                                      playDuration,
                                      playStartTime,
                                      notes,
                                      playerAttended,
                                      checkInDate,
                                      branchId,
                                      branchCourtId) {
            document.getElementById('edit-CheckInId').value = checkInId;
            document.getElementById('edit-CustomerName').value = customerName;
            document.getElementById('edit-CourtName').value = courtName || '';

            // Set play duration
            if (playDuration && playDuration !== 'NaN' && playDuration !== 'undefined' && playDuration > 0) {
                document.getElementById('edit-PlayDuration').value = Math.round(parseFloat(playDuration));
            } else {
                document.getElementById('edit-PlayDuration').value = '0';
            }

            // Set play start time
            document.getElementById('edit-PlayStartTime').value = playStartTime || '';
            document.getElementById('edit-Notes').value = notes || '';
            document.getElementById('edit-PlayerAttended').checked = playerAttended;
            document.getElementById('edit-CheckInDate').value = checkInDate;


            getCourtsByBranchId(branchId, 'edit-CourtName', branchCourtId);

            if (!branchCourtId) {
                showAlert("Select the correct Court from the dropdown select", 'warning');
                // add focus 
                document.getElementById('edit-CourtName').focus();
                // add a warning below the select input
                const courtSelect = document.getElementById('edit-CourtName');
                // remove existing warning if any
                const existingWarning = document.getElementById('warningDiv');
                if (existingWarning) {
                    existingWarning.remove();
                }
                const warningDiv = document.createElement('div');
                warningDiv.id = "warningDiv";
                warningDiv.className = 'text-danger mt-1';
                warningDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Please select the correct court.';
                courtSelect.parentNode.appendChild(warningDiv);
            }

            new bootstrap.Modal(document.getElementById('edit-CheckInModal')).show();
        }

        function submitEditCheckIn() {
            const checkInId = parseInt(document.getElementById('edit-CheckInId').value);
            const courtName = document.getElementById('edit-CourtName').value.trim();
            const playDuration = parseInt(document.getElementById('edit-PlayDuration').value);
            const playStartTime = document.getElementById('edit-PlayStartTime').value;
            const notes = document.getElementById('edit-Notes').value.trim();
            const playerAttended = document.getElementById('edit-PlayerAttended').checked;
            const checkInDate = document.getElementById('edit-CheckInDate').value;

            const checkInDateTime = new Date(`${checkInDate}T${playStartTime}:00`);


            let playStartDateTime = null;
            if (playStartTime) {
                const today = new Date();
                const [hours, minutes] = playStartTime.split(':');
                playStartDateTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));
            }

            fetch('@Url.Action("EditCheckIn", "AdminCheckIn")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    checkInId: checkInId,
                    branchCourtId: courtName || null,
                    playDurationMinutes: playDuration || 0,
                    playStartTime: playStartDateTime,
                    notes: notes || null,
                    playerAttended: playerAttended,
                    checkInDate: checkInDateTime
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('edit-CheckInModal')).hide();
                        showAlert(data.message, 'success');
                        // Refresh the page to show updated data
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('An error occurred while updating check-in details.', 'danger');
                });
        }

        function deleteCheckIn(checkInId, userName) {
            document.getElementById('deleteCheckInId').value = checkInId;
            document.getElementById('deleteUserName').textContent = userName;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        function confirmDeleteCheckIn() {
            const checkInId = parseInt(document.getElementById('deleteCheckInId').value);

            if (!checkInId) {
                showAlert('Invalid check-in ID.', 'danger');
                return;
            }

            fetch('@Url.Action("DeleteCheckIn", "CheckIn")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({checkInId: checkInId})
            })
                .then(response => response.json())
                .then(data => {
                    bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();

                    if (data.success) {
                        // Remove the row from the table
                        document.querySelector(`tr[data-checkin-id="${checkInId}"]`).remove();
                        showAlert(data.message, 'success');
                    } else {
                        showAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                    showAlert('An error occurred while deleting the check-in.', 'danger');
                });
        }

        function showAlert(message, type) {
            // Remove existing alerts
            const existingAlerts = document.querySelectorAll('.dynamic-alert');
            existingAlerts.forEach(alert => alert.remove());

            // Create new alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed dynamic-alert`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);

            // Remove alert after 5 seconds
            setTimeout(() => {
                if (alertDiv && alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Add CSRF token to all requests
        document.addEventListener('DOMContentLoaded', function () {
            // Add anti-forgery token to the page if it doesn't exist
            if (!document.querySelector('input[name="__RequestVerificationToken"]')) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = '@Html.AntiForgeryToken()'.match(/value="([^"]+)"/)?.[1] || '';
                document.body.appendChild(tokenInput);
            }
            // write it in plain js
            document.getElementById('page-select').value = '@Model.CheckIns.PageSize';
            document.getElementById('pageSize').value = '@Model.CheckIns.PageSize';
            document.getElementById('page').value = '@Model.CheckIns.CurrentPage';


            // click event on id edit-btn-confirm
            document.getElementById('edit-btn-checkin').addEventListener('click', function () {
                submitEditCheckIn();
            });
        });

        function getCourtsByBranchId(branchId, selectInputSelector, branchCourtId) {
            fetch(`GetCourtsByBranch?branchId=${branchId}`)
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        showAlert(data.message, 'danger');
                        return;
                    }
                    const courts = data.courts;
                    const courtSelect = document.getElementById(selectInputSelector);
                    // remove childs from courtSelect
                    courtSelect.innerHTML = '';
                    courts.forEach(court => {
                        const option = document.createElement('option');
                        option.value = court.value;
                        option.textContent = court.text;
                        if (court.value == branchCourtId) {
                            option.selected = true;
                        }
                        courtSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching courts:', error);
                    alert('Failed to load courts. Please try again later.');
                });
        }


        // Add these new JavaScript functions for manual check-in functionality
        let validatedUserData = null;


        document.getElementById('manualBranchId').addEventListener('change', function () {
            let isUserInfoLoaded = document.getElementById('userInfoSection').classList.contains('d-none');
            if (!isUserInfoLoaded) {
                document.getElementById('userInfoSection').classList.add('d-none');
                document.getElementById('checkInDetailsSection').classList.add('d-none');
            }

            const branchId = this.value;
            if (branchId) {
                getCourtsByBranchId(branchId, 'manualCourtName', null);
            } else {
                // Clear courts if no branch selected
                document.getElementById('manualCourtName').innerHTML = '';
            }
        });

        document.getElementById('manualCheckInDate').addEventListener('change', function () {
            let isUserInfoLoaded = document.getElementById('userInfoSection').classList.contains('d-none');
            if (!isUserInfoLoaded) {
                document.getElementById('userInfoSection').classList.add('d-none');
                document.getElementById('checkInDetailsSection').classList.add('d-none');
            }
        });

        document.getElementById('manualPhoneNumber').addEventListener('change', function () {
            let isUserInfoLoaded = document.getElementById('userInfoSection').classList.contains('d-none');
            if (!isUserInfoLoaded) {
                document.getElementById('userInfoSection').classList.add('d-none');
                document.getElementById('checkInDetailsSection').classList.add('d-none');
            }
        });

        function showAdminManualCheckInModal() {
            // Reset form
            document.getElementById('adminManualCheckInForm').reset();
            document.getElementById('userInfoSection').classList.add('d-none');
            document.getElementById('checkInDetailsSection').classList.add('d-none');
            document.getElementById('createManualCheckInBtn').classList.add('d-none');
            validatedUserData = null;

            // Set default date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('manualCheckInDate').value = today;


            new bootstrap.Modal(document.getElementById('adminManualCheckInModal')).show();
        }

        function validateUserForManualCheckIn() {
            const phoneNumber = phoneIti.getNumber();
            const checkInDate = document.getElementById('manualCheckInDate').value;
            const branchId = parseInt(document.getElementById('manualBranchId').value);

            if (!phoneNumber) {
                showAlert('Please enter a valid phone number.', 'danger');
                return;
            }

            if (!checkInDate) {
                showAlert('Please select a check-in date.', 'danger');
                return;
            }

            // Convert date to proper format for the request
            const checkInDateTime = new Date(checkInDate);

            fetch('@Url.Action("ValidateUserForManualCheckIn", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    phoneNumber: phoneNumber,
                    checkInDate: checkInDateTime,
                    branchId: branchId
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Store validated user data
                        validatedUserData = data;

                        // Show user information
                        displayValidatedUser(data);

                        // Show check-in details section
                        document.getElementById('checkInDetailsSection').classList.remove('d-none');
                        document.getElementById('createManualCheckInBtn').classList.remove('d-none');

                        showAlert('User validated successfully!', 'success');
                    } else {
                        showAlert(data.message, 'danger');

                        // Hide sections if validation failed
                        document.getElementById('userInfoSection').classList.add('d-none');
                        document.getElementById('checkInDetailsSection').classList.add('d-none');
                        document.getElementById('createManualCheckInBtn').classList.add('d-none');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('An error occurred while validating user.', 'danger');
                });
        }

        function displayValidatedUser(userData) {
            // Show user image
            const userImageDiv = document.getElementById('manualUserImage');
            if (userData.userImage) {
                userImageDiv.innerHTML = `
                <img src="${userData.userImage}" alt="${userData.userName}" 
                     class="rounded-circle" style="width: 80px; height: 80px; object-fit: cover;">`;
            } else {
                userImageDiv.innerHTML = `
                <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" 
                     style="width: 80px; height: 80px;">
                    <i class="bi bi-person-fill text-white" style="font-size: 2rem;"></i>
                </div>`;
            }

            // Set user details
            document.getElementById('manualUserName').textContent = userData.userName;
            document.getElementById('manualUserPhone').textContent = userData.phoneNumber;
            document.getElementById('manualUserSubscription').textContent =
                `${userData.subscriptionStartDate} to ${userData.subscriptionEndDate}`;

            // Show user info section
            document.getElementById('userInfoSection').classList.remove('d-none');
        }

        function submitManualCheckIn() {
            if (!validatedUserData) {
                showAlert('Please validate user first.', 'warning');
                return;
            }

            const form = document.getElementById('adminManualCheckInForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const phoneNumber = phoneIti.getNumber();
            const branchId = parseInt(document.getElementById('manualBranchId').value);
            const checkInDate = document.getElementById('manualCheckInDate').value;
            const courtName = document.getElementById('manualCourtName').value.trim();
            const playDuration = document.getElementById('manualPlayDuration').value;
            const playStartTime = document.getElementById('manualPlayStartTime').value;
            const notes = document.getElementById('manualNotes').value.trim();
            const playerAttended = document.getElementById('manualPlayerAttended').checked;

            // Combine date and time
            const checkInDateTime = new Date(`${checkInDate}T${playStartTime}:00`);

            // Handle play start time
            let playStartDateTime = null;
            if (playStartTime) {
                playStartDateTime = new Date(`${checkInDate}T${playStartTime}:00`);
            }

            const requestData = {
                phoneNumber: phoneNumber,
                branchId: branchId,
                checkInDateTime: checkInDateTime,
                branchCourtId: courtName,
                playDurationMinutes: playDuration ? parseInt(playDuration) : null,
                playStartTime: playStartDateTime ? playStartDateTime.toISOString() : null,
                notes: notes || null,
                playerAttended: playerAttended
            };

            fetch('@Url.Action("CreateManualCheckIn", "AdminCheckIn")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('adminManualCheckInModal')).hide();
                        showAlert(data.message, 'success');

                        // Refresh the check-ins list
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('An error occurred while creating manual check-in.', 'danger');
                });
        }

        // Reset form when modal is closed
        document.getElementById('adminManualCheckInModal')?.addEventListener('hidden.bs.modal', function () {
            document.getElementById('adminManualCheckInForm').reset();
            document.getElementById('userInfoSection').classList.add('d-none');
            document.getElementById('checkInDetailsSection').classList.add('d-none');
            document.getElementById('createManualCheckInBtn').classList.add('d-none');
            validatedUserData = null;
        });


        const phoneInputEl = document.getElementById('manualPhoneNumber');
        const phoneErrorEl = document.getElementById('manualPhoneNumberError');

        const phoneIti = window.intlTelInput(phoneInputEl, {
            initialCountry: "sa",
            nationalMode: false,                  // submit +E.164
            autoPlaceholder: "aggressive",
            geoIpLookup: cb => {
                fetch("https://ipapi.co/json")
                    .then(r => r.json())
                    .then(d => cb(d.country_code))
                    .catch(() => cb(defaultFallback.toLowerCase()));
            },
            loadUtils: () => import("https://cdn.jsdelivr.net/npm/intl-tel-input@25.8.3/build/js/utils.js"),
        });

        const phoneErrorMap = {
            0: "Invalid number",
            1: "Invalid country code",
            2: "Too short",
            3: "Too long",
            4: "Invalid number"
        };

        function validatePhone() {
            const v = phoneInputEl.value.trim();
            if (!v) {
                phoneInputEl.setCustomValidity("Required");
                phoneErrorEl.textContent = "Required";
                phoneErrorEl.classList.remove("d-none");
                return false;
            }
            // wait for utils to be ready on first load
            if (phoneIti.promise && phoneIti.promise.pending) return true;

            if (phoneIti.isValidNumber()) {
                phoneInputEl.setCustomValidity("");
                phoneErrorEl.classList.add("d-none");
                return true;
            } else {
                const err = phoneIti.getValidationError();
                const msg = phoneErrorMap[err] || "Invalid phone";
                phoneInputEl.setCustomValidity(msg);
                phoneErrorEl.textContent = msg;
                phoneErrorEl.classList.remove("d-none");
                return false;
            }
            

        }

        // mark utils pending state
        if (phoneIti.promise) {
            phoneIti.promise.pending = true;
            phoneIti.promise.then(() => phoneIti.promise.pending = false);
        }

        phoneInputEl.addEventListener("keyup", validatePhone);
        phoneInputEl.addEventListener("input", () => {
            phoneInputEl.setCustomValidity("");
            phoneErrorEl.classList.add("d-none");
        });
        phoneInputEl.addEventListener("countrychange", validatePhone);
    </script>
}