@model List<CheckIn>
@{
ViewData["Title"] = "Check-Ins Report";
var branches = ViewBag.Branches as List<Branch>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Check-Ins Report</h1>
    <div class="text-muted">
        <i class="bi bi-info-circle"></i> All times shown in KSA Time (UTC+3)
        <br><small>Current Time: @KSADateTimeExtensions.GetKSANow().ToString("yyyy-MM-dd HH:mm:ss") KSA</small>
    </div>
</div>

<div class="card mb-4">
    <div class="card-body">
        <form method="get" asp-action="CheckIns" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">From Date <small class="text-muted">(KSA)</small></label>
                <input type="date" name="fromDate" class="form-control" value="@ViewBag.FromDate?.ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label class="form-label">To Date <small class="text-muted">(KSA)</small></label>
                <input type="date" name="toDate" class="form-control" value="@ViewBag.ToDate?.ToString("yyyy-MM-dd")">
            </div>
            @if (User.IsInRole("Admin"))
            {
            <div class="col-md-3">
                <label class="form-label">Branch</label>
                <select name="branchId" class="form-select">
                    <option value="">All Branches</option>
                    @foreach (var branch in branches)
                    {
                    <option value="@branch.Id" selected="@(ViewBag.BranchId == branch.Id ? "selected" : null)">@branch.Name</option>
                    }
                </select>
            </div>
            }
            <div class="col-md-3">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-search"></i> Filter
                    </button>
                    <button type="submit" formaction="@Url.Action("ExportCheckIns")" class="btn btn-success">
                        <i class="bi bi-file-earmark-excel"></i> Export
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="resetForm()">
                        <i class="bi bi-x-circle"></i> Reset
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                <tr>
                    <th>End User</th>
                    <th>Phone</th>
                    <th>Branch</th>
                    <th>Date <small class="text-muted">(KSA)</small></th>
                    <th>Time <small class="text-muted">(KSA)</small></th>
                    <th>Court</th>
                    <th>Play Duration</th>
                    <th>Play Start Time <small class="text-muted">(KSA)</small></th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var checkIn in Model)
                {
                <tr data-checkin-id="@checkIn.Id">
                    <td>
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(checkIn.EndUser.ImageUrl))
                            {
                            <img src="@checkIn.EndUser.ImageUrl" alt="@checkIn.EndUser.Name"
                                 class="rounded-circle me-2" style="width: 30px; height: 30px; object-fit: cover;">
                            }
                            <span>@checkIn.EndUser.Name</span>
                        </div>
                    </td>
                    <td>@checkIn.EndUser.PhoneNumber</td>
                    <td>@checkIn.Branch.Name</td>
                    <td>@checkIn.CheckInDateTime.ToKSATime().ToString("yyyy-MM-dd")</td>
                    <td>@checkIn.CheckInDateTime.ToKSATime().ToString("HH:mm:ss")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(checkIn.CourtName))
                        {
                        <span class="badge bg-success">@checkIn.CourtName</span>
                        }
                        else
                        {
                        <span class="badge bg-warning">Not Assigned</span>
                        }
                    </td>
                    <td>
                        @if (checkIn.PlayDuration.HasValue)
                        {
                        <span>@((int)checkIn.PlayDuration.Value.TotalMinutes) min</span>
                        }
                        else
                        {
                        <span class="text-muted">Not Set</span>
                        }
                    </td>
                    <td>
                        @if (checkIn.PlayStartTime.HasValue)
                        {
                        <span>@checkIn.PlayStartTime.Value.ToKSATime().ToString("HH:mm:ss")</span>
                        }
                        else
                        {
                        <span class="text-muted">Not Set</span>
                        }
                    </td>
                    <td>
                        @if (User.IsInRole("Admin"))
                        {
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-primary btn-sm"
                                        onclick="showEditCheckInModal(@checkIn.Id, '@Html.Raw(checkIn.EndUser.Name)', '@Html.Raw(checkIn.CourtName)', '@(checkIn.PlayDuration?.TotalMinutes ?? 0)', '@checkIn.PlayStartTime?.ToKSATime().ToString("HH:mm")', '@Html.Raw(checkIn.Notes)')">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button type="button" class="btn btn-danger btn-sm"
                                        onclick="deleteCheckIn(@checkIn.Id, '@Html.Raw(checkIn.EndUser.Name)')">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        }
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>

        @if (!Model.Any())
        {
        <div class="text-center text-muted py-5">
            <i class="bi bi-list-check fs-1 mb-3"></i>
            <h5>No Check-Ins Found</h5>
            <p>No check-ins found for the selected criteria.</p>
        </div>
        }
        else
        {
        <div class="mt-3 text-muted">
            <small>
                <i class="bi bi-info-circle"></i>
                Showing @Model.Count check-in(s). All times displayed in KSA Time (UTC+3).
            </small>
        </div>
        }
    </div>
</div>

<!-- Edit Check-In Modal -->
<div class="modal fade" id="editCheckInModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Check-In Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editCheckInForm">
                    <input type="hidden" id="editCheckInId">
                    <div class="mb-3">
                        <label class="form-label">Customer Name</label>
                        <input type="text" id="editCustomerName" class="form-control" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Court Name/Number</label>
                        <input type="text" id="editCourtName" class="form-control"
                               placeholder="e.g., Court 1, Court A">
                        <small class="text-muted">Leave empty to remove court assignment</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Play Duration (minutes)</label>
                        <select id="editPlayDuration" class="form-select">
                            <option value="0">Not set</option>
                            <option value="60">60 minutes</option>
                            <option value="90">90 minutes</option>
                            <option value="120">120 minutes</option>
                            <option value="150">150 minutes</option>
                            <option value="180">180 minutes</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Play Start Time <small class="text-muted">(KSA)</small></label>
                        <input type="time" id="editPlayStartTime" class="form-control">
                        <small class="text-muted">Leave empty to remove start time</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea id="editNotes" class="form-control" rows="3"
                                  placeholder="Additional notes (optional)"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitEditCheckIn()">Update Check-In</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete the check-in for <strong id="deleteUserName"></strong>?</p>
                <input type="hidden" id="deleteCheckInId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteCheckIn()">
                    <i class="bi bi-trash"></i> Delete Check-In
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    function resetForm() {
        window.location.href = '@Url.Action("CheckIns", "Admin")';
    }

    function showEditCheckInModal(checkInId, customerName, courtName, playDuration, playStartTime, notes) {
        document.getElementById('editCheckInId').value = checkInId;
        document.getElementById('editCustomerName').value = customerName;
        document.getElementById('editCourtName').value = courtName || '';

        // Set play duration
        if (playDuration && playDuration !== 'NaN' && playDuration !== 'undefined' && playDuration > 0) {
            document.getElementById('editPlayDuration').value = Math.round(parseFloat(playDuration));
        } else {
            document.getElementById('editPlayDuration').value = '0';
        }

        // Set play start time
        document.getElementById('editPlayStartTime').value = playStartTime || '';
        document.getElementById('editNotes').value = notes || '';

        new bootstrap.Modal(document.getElementById('editCheckInModal')).show();
    }

    function submitEditCheckIn() {
        const checkInId = parseInt(document.getElementById('editCheckInId').value);
        const courtName = document.getElementById('editCourtName').value.trim();
        const playDuration = parseInt(document.getElementById('editPlayDuration').value);
        const playStartTime = document.getElementById('editPlayStartTime').value;
        const notes = document.getElementById('editNotes').value.trim();

        let playStartDateTime = null;
        if (playStartTime) {
            const today = new Date();
            const [hours, minutes] = playStartTime.split(':');
            playStartDateTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));
        }

        fetch('@Url.Action("EditCheckIn", "Admin")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                checkInId: checkInId,
                courtName: courtName || null,
                playDurationMinutes: playDuration || 0,
                playStartTime: playStartDateTime,
                notes: notes || null
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('editCheckInModal')).hide();
                    showAlert(data.message, 'success');
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showAlert(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('An error occurred while updating check-in details.', 'danger');
            });
    }

    function deleteCheckIn(checkInId, userName) {
        document.getElementById('deleteCheckInId').value = checkInId;
        document.getElementById('deleteUserName').textContent = userName;
        new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
    }

    function confirmDeleteCheckIn() {
        const checkInId = parseInt(document.getElementById('deleteCheckInId').value);

        if (!checkInId) {
            showAlert('Invalid check-in ID.', 'danger');
            return;
        }

        fetch('@Url.Action("DeleteCheckIn", "CheckIn")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ checkInId: checkInId })
        })
            .then(response => response.json())
            .then(data => {
                bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();

                if (data.success) {
                    // Remove the row from the table
                    document.querySelector(`tr[data-checkin-id="${checkInId}"]`).remove();
                    showAlert(data.message, 'success');
                } else {
                    showAlert(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                showAlert('An error occurred while deleting the check-in.', 'danger');
            });
    }

    function showAlert(message, type) {
        // Remove existing alerts
        const existingAlerts = document.querySelectorAll('.dynamic-alert');
        existingAlerts.forEach(alert => alert.remove());

        // Create new alert
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed dynamic-alert`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        alertDiv.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        document.body.appendChild(alertDiv);

        // Remove alert after 5 seconds
        setTimeout(() => {
            if (alertDiv && alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }

    // Add CSRF token to all requests
    document.addEventListener('DOMContentLoaded', function() {
        // Add anti-forgery token to the page if it doesn't exist
        if (!document.querySelector('input[name="__RequestVerificationToken"]')) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = '@Html.AntiForgeryToken()'.match(/value="([^"]+)"/)?.[1] || '';
            document.body.appendChild(tokenInput);
        }
    });
</script>
}