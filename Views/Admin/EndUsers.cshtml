@model List<PadelPassCheckInSystem.Models.Entities.EndUser>
@{
    ViewData["Title"] = "End Users Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>End Users Management</h1>
    <div>
        <div class="text-muted small mb-2">
            <i class="bi bi-clock"></i> Current Time: @KSADateTimeExtensions.GetKSANow().ToString("yyyy-MM-dd HH:mm:ss") KSA
        </div>
        <a href="@Url.Action("PauseHistory")" class="btn btn-outline-info">
            <i class="bi bi-clock-history"></i> View All Pause History
        </a>
        <button type="button" class="btn btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="bi bi-plus-circle"></i> Add New End User
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Photo</th>
                        <th>Name</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Subscription <small class="text-muted">(KSA Time)</small></th>
                        <th>Status</th>
                        <th>QR Code</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        var today = KSADateTimeExtensions.GetKSANow().Date;
                        var subscriptionStartKSA = user.SubscriptionStartDate.ToKSATime().Date;
                        var subscriptionEndKSA = user.SubscriptionEndDate.ToKSATime().Date;
                        var isActive = subscriptionStartKSA <= today && subscriptionEndKSA >= today;
                        var isPaused = user.IsPaused && user.CurrentPauseStartDate?.ToKSATime().Date <= today && user.CurrentPauseEndDate?.ToKSATime().Date >= today;
                        
                        <tr class="@(isPaused ? "table-warning" : "")">
                            <td>
                                @if (!string.IsNullOrEmpty(user.ImageUrl))
                                {
                                    <img src="@user.ImageUrl" alt="@user.Name" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="bi bi-person text-white"></i>
                                    </div>
                                }
                            </td>
                            <td>
                                <strong>@user.Name</strong>
                                @if (isPaused)
                                {
                                    <br><small class="text-warning"><i class="bi bi-pause-circle"></i> Currently Paused</small>
                                }
                            </td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.Email</td>
                            <td>
                                <small>
                                    <strong>Start:</strong> @user.SubscriptionStartDate.ToKSATime().ToString("MMM dd, yyyy")<br>
                                    <strong>End:</strong> @user.SubscriptionEndDate.ToKSATime().ToString("MMM dd, yyyy")
                                </small>
                                @if (user.IsPaused)
                                {
                                    <br><small class="text-warning">
                                        Paused until @user.CurrentPauseEndDate?.ToKSATime().ToString("MMM dd, yyyy")
                                    </small>
                                }
                            </td>
                            <td>
                                @if (isPaused)
                                {
                                    <span class="badge bg-warning">Paused</span>
                                }
                                else if (isActive)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Inactive</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" onclick="generateQRCode(@user.Id)">
                                    <i class="bi bi-qr-code"></i> Generate
                                </button>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                        <i class="bi bi-gear"></i> Actions
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button class="dropdown-item" onclick="editUser(@user.Id, '@user.Name', '@user.PhoneNumber', '@user.Email', '@user.ImageUrl', '@user.SubscriptionStartDate.ToKSATime().ToString("yyyy-MM-dd")', '@user.SubscriptionEndDate.ToKSATime().ToString("yyyy-MM-dd")')">
                                                <i class="bi bi-pencil"></i> Edit Details
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        @if (user.IsPaused)
                                        {
                                            <li>
                                                <form asp-action="UnpauseSubscription" method="post" style="display: inline;" 
                                                      onsubmit="return confirm('Are you sure you want to unpause this subscription?');">
                                                    <input type="hidden" name="endUserId" value="@user.Id" />
                                                    <button type="submit" class="dropdown-item text-success">
                                                        <i class="bi bi-play-circle"></i> Unpause Subscription
                                                    </button>
                                                </form>
                                            </li>
                                        }
                                        else
                                        {
                                            <li>
                                                <a class="dropdown-item text-warning" href="@Url.Action("PauseSubscription", new { endUserId = user.Id })">
                                                    <i class="bi bi-pause-circle"></i> Pause Subscription
                                                </a>
                                            </li>
                                        }
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("PauseHistory", new { endUserId = user.Id })">
                                                <i class="bi bi-clock-history"></i> View Pause History
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <form asp-action="DeleteEndUser" method="post" style="display: inline;" 
                                                  onsubmit="return confirm('Are you sure you want to delete this user? This action cannot be undone.');">
                                                <input type="hidden" name="id" value="@user.Id" />
                                                <button type="submit" class="dropdown-item text-danger">
                                                    <i class="bi bi-trash"></i> Delete User
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Statistics Card -->
<div class="row mt-4">
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Total Users</h5>
                <h2 class="text-primary">@Model.Count</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Active Subscriptions</h5>
                <h2 class="text-success">@Model.Count(u => {
                    var today = KSADateTimeExtensions.GetKSANow().Date;
                    var startKSA = u.SubscriptionStartDate.ToKSATime().Date;
                    var endKSA = u.SubscriptionEndDate.ToKSATime().Date;
                    return startKSA <= today && endKSA >= today && !u.IsPaused;
                })</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Currently Paused</h5>
                <h2 class="text-warning">@Model.Count(u => {
                    var today = KSADateTimeExtensions.GetKSANow().Date;
                    return u.IsPaused && u.CurrentPauseStartDate?.ToKSATime().Date <= today && u.CurrentPauseEndDate?.ToKSATime().Date >= today;
                })</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Expired</h5>
                <h2 class="text-danger">@Model.Count(u => u.SubscriptionEndDate.ToKSATime().Date < KSADateTimeExtensions.GetKSANow().Date)</h2>
            </div>
        </div>
    </div>
</div>

<!-- Existing modals remain the same, but update JavaScript date handling -->

@section Scripts {
    <script>
        function editUser(id, name, phone, email, imageUrl, startDate, endDate) {
            document.getElementById('editId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editPhone').value = phone;
            document.getElementById('editEmail').value = email;
            document.getElementById('editImageUrl').value = imageUrl;
            // Dates are already converted to KSA format in the server
            document.getElementById('editStartDate').value = startDate;
            document.getElementById('editEndDate').value = endDate;
            
            new bootstrap.Modal(document.getElementById('editModal')).show();
        }

        // Rest of JavaScript remains the same...
    </script>
}

<!-- Keep existing Create and Edit modals unchanged -->