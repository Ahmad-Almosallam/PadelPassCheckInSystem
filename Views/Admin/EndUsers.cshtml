@model List<PadelPassCheckInSystem.Models.Entities.EndUser>
@{
ViewData["Title"] = "End Users Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>End Users Management</h1>
    <div>
        <div class="text-muted small mb-2">
            <i class="bi bi-clock"></i> Current Time: @KSADateTimeExtensions.GetKSANow().ToString("yyyy-MM-dd HH:mm:ss") KSA
        </div>
        <a href="@Url.Action("PauseHistory")" class="btn btn-outline-info">
            <i class="bi bi-clock-history"></i> View All Pause History
        </a>
        <button type="button" class="btn btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="bi bi-plus-circle"></i> Add New End User
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                <tr>
                    <th>Photo</th>
                    <th>Name</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Subscription <small class="text-muted">(KSA Time)</small></th>
                    <th>Status</th>
                    <th>QR Code</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in Model)
                {
                var today = KSADateTimeExtensions.GetKSANow().Date;
                var subscriptionStartKSA = user.SubscriptionStartDate.ToKSATime().Date;
                var subscriptionEndKSA = user.SubscriptionEndDate.ToKSATime().Date;
                var isActive = subscriptionStartKSA <= today && subscriptionEndKSA >= today;
                var isPaused = user.IsPaused && user.CurrentPauseStartDate?.ToKSATime().Date <= today && user.CurrentPauseEndDate?.ToKSATime().Date >= today;

                <tr class="@(isPaused ? "table-warning" : "")">
                    <td>
                        @if (!string.IsNullOrEmpty(user.ImageUrl))
                        {
                        <img src="@user.ImageUrl" alt="@user.Name" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;">
                        }
                        else
                        {
                        <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                            <i class="bi bi-person text-white"></i>
                        </div>
                        }
                    </td>
                    <td>
                        <strong>@user.Name</strong>
                        @if (isPaused)
                        {
                        <br><small class="text-warning"><i class="bi bi-pause-circle"></i> Currently Paused</small>
                        }
                    </td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Email</td>
                    <td>
                        <small>
                            <strong>Start:</strong> @user.SubscriptionStartDate.ToKSATime().ToString("MMM dd, yyyy")<br>
                            <strong>End:</strong> @user.SubscriptionEndDate.ToKSATime().ToString("MMM dd, yyyy")
                        </small>
                        @if (user.IsPaused)
                        {
                        <br><small class="text-warning">
                            Paused until @user.CurrentPauseEndDate?.ToKSATime().ToString("MMM dd, yyyy")
                        </small>
                        }
                    </td>
                    <td>
                        @if (isPaused)
                        {
                        <span class="badge bg-warning">Paused</span>
                        }
                        else if (isActive)
                        {
                        <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                        <span class="badge bg-danger">Inactive</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="generateQRCode(@user.Id)">
                            <i class="bi bi-qr-code"></i> Generate
                        </button>
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="bi bi-gear"></i> Actions
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <button class="dropdown-item" onclick="editUser(@user.Id, '@user.Name', '@user.PhoneNumber', '@user.Email', '@user.ImageUrl', '@user.SubscriptionStartDate.ToKSATime().ToString("yyyy-MM-dd")', '@user.SubscriptionEndDate.ToKSATime().ToString("yyyy-MM-dd")')">
                                        <i class="bi bi-pencil"></i> Edit Details
                                    </button>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                @if (user.IsPaused)
                                {
                                <li>
                                    <form asp-action="UnpauseSubscription" method="post" style="display: inline;"
                                          onsubmit="return confirm('Are you sure you want to unpause this subscription?');">
                                        <input type="hidden" name="endUserId" value="@user.Id" />
                                        <button type="submit" class="dropdown-item text-success">
                                            <i class="bi bi-play-circle"></i> Unpause Subscription
                                        </button>
                                    </form>
                                </li>
                                }
                                else
                                {
                                <li>
                                    <a class="dropdown-item text-warning" href="@Url.Action("PauseSubscription", new { endUserId = user.Id })">
                                        <i class="bi bi-pause-circle"></i> Pause Subscription
                                    </a>
                                </li>
                                }
                                <li>
                                    <a class="dropdown-item" href="@Url.Action("PauseHistory", new { endUserId = user.Id })">
                                        <i class="bi bi-clock-history"></i> View Pause History
                                    </a>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form asp-action="DeleteEndUser" method="post" style="display: inline;"
                                          onsubmit="return confirm('Are you sure you want to delete this user? This action cannot be undone.');">
                                        <input type="hidden" name="id" value="@user.Id" />
                                        <button type="submit" class="dropdown-item text-danger">
                                            <i class="bi bi-trash"></i> Delete User
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Statistics Card -->
<div class="row mt-4">
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Total Users</h5>
                <h2 class="text-primary">@Model.Count</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Active Subscriptions</h5>
                <h2 class="text-success">@Model.Count(u => {
                    var today = KSADateTimeExtensions.GetKSANow().Date;
                    var startKSA = u.SubscriptionStartDate.ToKSATime().Date;
                    var endKSA = u.SubscriptionEndDate.ToKSATime().Date;
                    return startKSA <= today && endKSA >= today && !u.IsPaused;
                    })</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Currently Paused</h5>
                <h2 class="text-warning">@Model.Count(u => {
                    var today = KSADateTimeExtensions.GetKSANow().Date;
                    return u.IsPaused && u.CurrentPauseStartDate?.ToKSATime().Date <= today && u.CurrentPauseEndDate?.ToKSATime().Date >= today;
                    })</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h5 class="card-title">Expired</h5>
                <h2 class="text-danger">@Model.Count(u => u.SubscriptionEndDate.ToKSATime().Date < KSADateTimeExtensions.GetKSANow().Date)</h2>
            </div>
        </div>
    </div>
</div>

<!-- Create Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form asp-action="CreateEndUser" method="post">
                <div class="modal-header">
                    <h5 class="modal-title">Add New End User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Name *</label>
                                <input type="text" name="Name" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone Number *</label>
                                <input type="tel" name="PhoneNumber" class="form-control" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" name="Email" class="form-control">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Image URL</label>
                                <input type="url" name="ImageUrl" class="form-control">
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <h6><i class="bi bi-info-circle"></i> Subscription Period</h6>
                        <p class="mb-0">You can either set the duration in months (auto-calculated) or manually set the end date.</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Subscription Start Date *</label>
                                <input type="date" id="createStartDate" name="SubscriptionStartDate" class="form-control" required onchange="calculateEndDate()">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Duration (Months)</label>
                                <input type="number" id="createDurationMonths" name="SubscriptionDurationMonths" 
                                       class="form-control" min="1" max="60" placeholder="e.g., 12" value="0"
                                       onchange="calculateEndDate()">
                                <small class="text-muted">Auto-calculates end date</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Subscription End Date *</label>
                                <input type="date" id="createEndDate" name="SubscriptionEndDate" class="form-control" required onchange="clearDuration()">
                                <small class="text-muted">Or set manually</small>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-warning d-none" id="dateCalculationAlert">
                        <i class="bi bi-calculator"></i> <strong>Auto-calculated:</strong> 
                        <span id="calculationDetails"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create End User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form asp-action="UpdateEndUser" method="post">
                <input type="hidden" id="editId" name="id">
                <div class="modal-header">
                    <h5 class="modal-title">Edit End User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Name *</label>
                                <input type="text" id="editName" name="Name" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone Number *</label>
                                <input type="tel" id="editPhone" name="PhoneNumber" class="form-control" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" id="editEmail" name="Email" class="form-control">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Image URL</label>
                                <input type="url" id="editImageUrl" name="ImageUrl" class="form-control">
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <h6><i class="bi bi-info-circle"></i> Subscription Period</h6>
                        <p class="mb-0">You can either set the duration in months (auto-calculated) or manually set the end date.</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Subscription Start Date *</label>
                                <input type="date" id="editStartDate" name="SubscriptionStartDate" class="form-control" required onchange="calculateEditEndDate()">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Duration (Months)</label>
                                <input type="number" id="editDurationMonths" name="SubscriptionDurationMonths" 
                                       class="form-control" min="1" max="60" placeholder="e.g., 12"
                                       onchange="calculateEditEndDate()">
                                <small class="text-muted">Auto-calculates end date</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Subscription End Date *</label>
                                <input type="date" id="editEndDate" name="SubscriptionEndDate" class="form-control" required onchange="clearEditDuration()">
                                <small class="text-muted">Or set manually</small>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-warning d-none" id="editDateCalculationAlert">
                        <i class="bi bi-calculator"></i> <strong>Auto-calculated:</strong> 
                        <span id="editCalculationDetails"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update End User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- QR Code Modal -->
<div class="modal fade" id="qrModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Member QR Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <img id="qrCodeImage" src="" alt="QR Code" class="img-fluid" style="max-width: 300px;">
                </div>
                <div class="alert alert-info">
                    <p class="mb-2"><strong>Member ID:</strong> <span id="uniqueId"></span></p>
                    <small>This QR code can be scanned for quick check-in</small>
                </div>
                <button class="btn btn-primary btn-lg" onclick="downloadQR()">
                    <i class="bi bi-download"></i> Download QR Code
                </button>
                <hr>
                <p class="text-muted small">
                    <i class="bi bi-info-circle"></i> Save this QR code to your phone or print it for easy access at check-in.
                </p>
            </div>
        </div>
    </div>
</div>

<!-- QR Link Modal for Mobile -->
<div class="modal fade" id="qrLinkModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">QR Code Download Link</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-success">
                    <i class="bi bi-check-circle"></i>
                    <strong>Success!</strong> QR code download link generated successfully.
                </div>

                <div class="mb-3">
                    <label class="form-label">Copy this link and share it:</label>
                    <div class="input-group">
                        <input type="text" id="qrDownloadLink" class="form-control" readonly>
                        <button class="btn btn-outline-secondary" type="button" onclick="copyLinkFallback()">
                            <i class="bi bi-clipboard" id="copyIcon"></i> Copy
                        </button>
                    </div>
                </div>

                <div class="d-grid gap-2">
                    <button class="btn btn-primary" onclick="openQRLink()">
                        <i class="bi bi-box-arrow-up-right"></i> Open QR Download Page
                    </button>
                    <button class="btn btn-outline-success" onclick="shareQRLink()" id="shareButton" style="display: none;">
                        <i class="bi bi-share"></i> Share Link
                    </button>
                </div>

                <div class="mt-3">
                    <small class="text-muted">
                        <i class="bi bi-info-circle"></i>
                        The link can only be used once. Make sure to download the QR code when you open it.
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    function editUser(id, name, phone, email, imageUrl, startDate, endDate) {
        document.getElementById('editId').value = id;
        document.getElementById('editName').value = name;
        document.getElementById('editPhone').value = phone;
        document.getElementById('editEmail').value = email;
        document.getElementById('editImageUrl').value = imageUrl;
        // Dates are already converted to KSA format in the server
        document.getElementById('editStartDate').value = startDate;
        document.getElementById('editEndDate').value = endDate;

        // Clear duration field and calculation alert when editing existing user
        document.getElementById('editDurationMonths').value = '';
        document.getElementById('editDateCalculationAlert').classList.add('d-none');

        new bootstrap.Modal(document.getElementById('editModal')).show();
    }

    // Calculate end date based on start date and duration (Create Modal)
    function calculateEndDate() {
        const startDateInput = document.getElementById('createStartDate');
        const durationInput = document.getElementById('createDurationMonths');
        const endDateInput = document.getElementById('createEndDate');
        const alert = document.getElementById('dateCalculationAlert');
        const details = document.getElementById('calculationDetails');

        if (startDateInput.value && durationInput.value) {
            const startDate = new Date(startDateInput.value);
            const months = parseInt(durationInput.value);
            
            // Calculate end date by adding months
            const endDate = new Date(startDate);
            endDate.setMonth(endDate.getMonth() + months);
            
            // Format date for input (YYYY-MM-DD)
            const formattedEndDate = endDate.toISOString().split('T')[0];
            endDateInput.value = formattedEndDate;
            
            // Show calculation details
            details.textContent = `${months} month${months > 1 ? 's' : ''} from ${startDate.toLocaleDateString()} = ${endDate.toLocaleDateString()}`;
            alert.classList.remove('d-none');
        } else {
            alert.classList.add('d-none');
        }
    }

    // Calculate end date based on start date and duration (Edit Modal)
    function calculateEditEndDate() {
        const startDateInput = document.getElementById('editStartDate');
        const durationInput = document.getElementById('editDurationMonths');
        const endDateInput = document.getElementById('editEndDate');
        const alert = document.getElementById('editDateCalculationAlert');
        const details = document.getElementById('editCalculationDetails');

        if (startDateInput.value && durationInput.value) {
            const startDate = new Date(startDateInput.value);
            const months = parseInt(durationInput.value);
            
            // Calculate end date by adding months
            const endDate = new Date(startDate);
            endDate.setMonth(endDate.getMonth() + months);
            
            // Format date for input (YYYY-MM-DD)
            const formattedEndDate = endDate.toISOString().split('T')[0];
            endDateInput.value = formattedEndDate;
            
            // Show calculation details
            details.textContent = `${months} month${months > 1 ? 's' : ''} from ${startDate.toLocaleDateString()} = ${endDate.toLocaleDateString()}`;
            alert.classList.remove('d-none');
        } else {
            alert.classList.add('d-none');
        }
    }

    // Clear duration when end date is manually changed (Create Modal)
    function clearDuration() {
        const durationInput = document.getElementById('createDurationMonths');
        const alert = document.getElementById('dateCalculationAlert');
        
        // Clear the duration field to indicate manual override
        durationInput.value = '';
        alert.classList.add('d-none');
    }

    // Clear duration when end date is manually changed (Edit Modal)
    function clearEditDuration() {
        const durationInput = document.getElementById('editDurationMonths');
        const alert = document.getElementById('editDateCalculationAlert');
        
        // Clear the duration field to indicate manual override
        durationInput.value = '';
        alert.classList.add('d-none');
    }

    // Set default start date to today when modal opens
    document.getElementById('createModal').addEventListener('show.bs.modal', function() {
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('createStartDate').value = today;
        
        // Set default duration to 12 months
        document.getElementById('createDurationMonths').value = '';
        
        // Calculate initial end date
        calculateEndDate();
    });

    // Reset form when modal closes
    document.getElementById('createModal').addEventListener('hidden.bs.modal', function() {
        document.querySelector('#createModal form').reset();
        document.getElementById('dateCalculationAlert').classList.add('d-none');
    });

    // Reset edit form when modal closes
    document.getElementById('editModal').addEventListener('hidden.bs.modal', function() {
        document.getElementById('editDateCalculationAlert').classList.add('d-none');
    });

    function generateQRCode(userId) {
        fetch(`/Admin/GenerateQRCode?endUserId=${userId}`)
            .then(response => response.json())
            .then(async data => {
                if (data.success) {
                    // Show the QR link modal with multiple options
                    showQRLinkModal(data.downloadUrl);
                } else if (data.message === "QR code has already been downloaded.") {
                    if (confirm("This QR code has already been downloaded. Would you like to generate a new one?")) {
                        regenerateQRCode(userId);
                    }
                } else {
                    // Show error message
                    showErrorAlert(data.message || 'Failed to generate QR code');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorAlert('Error generating QR code');
            });
    }

    function regenerateQRCode(userId) {
        fetch(`/Admin/GenerateQRCode?endUserId=${userId}&forceRegenerate=true`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showQRLinkModal(data.downloadUrl);
                } else {
                    showErrorAlert(data.message || 'Failed to regenerate QR code');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorAlert('Error regenerating QR code');
            });
    }

    function showQRLinkModal(downloadUrl) {
        document.getElementById('qrDownloadLink').value = downloadUrl;

        // Show share button if Web Share API is supported
        if (navigator.share) {
            document.getElementById('shareButton').style.display = 'block';
        }

        new bootstrap.Modal(document.getElementById('qrLinkModal')).show();
        showSuccessAlert('QR code download link generated successfully!');
    }

    function copyLinkFallback() {
        const linkInput = document.getElementById('qrDownloadLink');
        const copyIcon = document.getElementById('copyIcon');

        // Try multiple methods for copying
        let copySuccess = false;

        // Method 1: Modern clipboard API (works on HTTPS)
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(linkInput.value).then(() => {
                copySuccess = true;
                updateCopyButton(copyIcon, true);
            }).catch(() => {
                // Fallback to method 2
                copySuccess = fallbackCopyMethod(linkInput);
                updateCopyButton(copyIcon, copySuccess);
            });
        } else {
            // Method 2: Fallback for older browsers and non-HTTPS
            copySuccess = fallbackCopyMethod(linkInput);
            updateCopyButton(copyIcon, copySuccess);
        }
    }

    function fallbackCopyMethod(input) {
        try {
            // Select the text
            input.select();
            input.setSelectionRange(0, 99999); // For mobile devices

            // Copy the text
            const successful = document.execCommand('copy');

            // Deselect
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }

            return successful;
        } catch (err) {
            console.error('Fallback copy failed:', err);
            return false;
        }
    }

    function updateCopyButton(icon, success) {
        if (success) {
            icon.className = 'bi bi-check-circle text-success';
            setTimeout(() => {
                icon.className = 'bi bi-clipboard';
            }, 2000);
            showSuccessAlert('Link copied to clipboard!');
        } else {
            icon.className = 'bi bi-x-circle text-danger';
            setTimeout(() => {
                icon.className = 'bi bi-clipboard';
            }, 2000);
            showErrorAlert('Failed to copy link. Please manually select and copy the text.');

            // Automatically select the text for manual copying
            const linkInput = document.getElementById('qrDownloadLink');
            linkInput.focus();
            linkInput.select();
        }
    }

    function openQRLink() {
        const link = document.getElementById('qrDownloadLink').value;
        window.open(link, '_blank');
    }

    function shareQRLink() {
        const link = document.getElementById('qrDownloadLink').value;

        if (navigator.share) {
            navigator.share({
                title: 'QR Code Download',
                text: 'Download your QR code for check-in',
                url: link
            }).then(() => {
                console.log('Successfully shared');
            }).catch((error) => {
                console.log('Error sharing:', error);
                // Fallback to copy
                copyLinkFallback();
            });
        } else {
            // Fallback to copy
            copyLinkFallback();
        }
    }

    function downloadQR() {
        const link = document.createElement('a');
        const qrImage = document.getElementById('qrCodeImage').src;
        const memberId = document.getElementById('uniqueId').textContent;

        link.href = qrImage;
        link.download = `QRCode_${memberId}.png`;
        link.click();
    }

    function showSuccessAlert(message) {
        showAlert(message, 'success');
    }

    function showErrorAlert(message) {
        showAlert(message, 'danger');
    }

    function showAlert(message, type) {
        // Remove existing alerts
        const existingAlerts = document.querySelectorAll('.dynamic-alert');
        existingAlerts.forEach(alert => alert.remove());

        // Create new alert
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed dynamic-alert`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        alertDiv.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        document.body.appendChild(alertDiv);

        // Remove alert after 5 seconds
        setTimeout(() => {
            if (alertDiv && alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        // Check if we're on a mobile device
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        // Add mobile-specific styles if needed
        if (isMobile) {
            const style = document.createElement('style');
            style.textContent = `
                    .input-group input {
                        font-size: 16px; /* Prevent zoom on iOS */
                    }
                    .modal-dialog {
                        margin: 10px;
                    }
                `;
            document.head.appendChild(style);
        }

        // Add input event listeners for real-time calculation
        const startDateInput = document.getElementById('createStartDate');
        const durationInput = document.getElementById('createDurationMonths');
        const editStartDateInput = document.getElementById('editStartDate');
        const editDurationInput = document.getElementById('editDurationMonths');
        
        if (startDateInput && durationInput) {
            startDateInput.addEventListener('input', calculateEndDate);
            durationInput.addEventListener('input', calculateEndDate);
        }

        if (editStartDateInput && editDurationInput) {
            editStartDateInput.addEventListener('input', calculateEditEndDate);
            editDurationInput.addEventListener('input', calculateEditEndDate);
        }
    });
</script>
}