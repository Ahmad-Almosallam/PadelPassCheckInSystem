@model PadelPassCheckInSystem.Models.ViewModels.Dashboard.DashboardAnalyticsViewModel
@{
    ViewData["Title"] = "Dashboard Analytics";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-speedometer2"></i> Dashboard Analytics</h1>
    <div class="text-muted">
        <i class="bi bi-clock"></i> Last updated: @DateTime.UtcNow.ToKSATime().ToString("MMM dd, yyyy HH:mm") KSA
        <button class="btn btn-sm btn-outline-primary ms-2" onclick="refreshAllAnalytics()">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
</div>

<!-- Key Metrics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="text-uppercase mb-1">Total Branches</h6>
                        <h2 class="mb-0">@Model.TotalBranches</h2>
                    </div>
                    <div><i class="bi bi-building fs-1"></i></div>
                </div>
            </div>
            <div class="card-footer">
                <a href="@Url.Action("Branches", "Branch")" class="text-white text-decoration-none">
                    View Details <i class="bi bi-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card bg-success text-white h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="text-uppercase mb-1">End Users</h6>
                        <h2 class="mb-0">@Model.TotalEndUsers</h2>
                    </div>
                    <div><i class="bi bi-people fs-1"></i></div>
                </div>
            </div>
            <div class="card-footer">
                <a href="@Url.Action("EndUsers", "Admin")" class="text-white text-decoration-none">
                    View Details <i class="bi bi-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card bg-info text-white h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="text-uppercase mb-1">Today's Check-Ins</h6>
                        <h2 class="mb-0">@Model.TotalCheckInsToday</h2>
                    </div>
                    <div><i class="bi bi-check-circle fs-1"></i></div>
                </div>
            </div>
            <div class="card-footer">
                <a href="@Url.Action("CheckIns", "Admin")" class="text-white text-decoration-none">
                    View Details <i class="bi bi-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card bg-warning text-white h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="text-uppercase mb-1">Active Subscriptions</h6>
                        <h2 class="mb-0">@Model.ActiveSubscriptions</h2>
                    </div>
                    <div><i class="bi bi-calendar-check fs-1"></i></div>
                </div>
            </div>
            <div class="card-footer">
                <a href="@Url.Action("EndUsers", "Admin")" class="text-white text-decoration-none">
                    View Details <i class="bi bi-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Analytics Tabs -->
<div class="card">
    <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="loyalty-tab" data-bs-toggle="tab" data-bs-target="#loyalty" type="button" role="tab">
                    <i class="bi bi-heart"></i> User Loyalty
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="utilization-tab" data-bs-toggle="tab" data-bs-target="#utilization" type="button" role="tab" onclick="loadUtilizationData()">
                    <i class="bi bi-bar-chart"></i> Utilization
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="trends-tab" data-bs-toggle="tab" data-bs-target="#trends" type="button" role="tab" onclick="loadTrendsData()">
                    <i class="bi bi-graph-up"></i> Trends
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="branches-tab" data-bs-toggle="tab" data-bs-target="#branches" type="button" role="tab" onclick="loadBranchData()">
                    <i class="bi bi-building"></i> Branch Analytics
                </button>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="analyticsTabContent">
            <!-- User Loyalty Tab - Loaded initially -->
            <div class="tab-pane fade show active" id="loyalty" role="tabpanel">
                <div class="row">
                    <!-- User Loyalty Segments -->
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-people-fill"></i> User Loyalty Segments</h5>
                                <small class="text-muted">@Model.UserLoyaltySegments.AnalysisPeriod</small>
                            </div>
                            <div class="card-body">
                                <canvas id="loyaltyChart" width="400" height="200"></canvas>
                                <div class="row mt-3">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <span class="badge bg-success fs-6">@Model.UserLoyaltySegments.VipUsers</span>
                                            <div class="small text-muted">VIP Users (15+ visits)</div>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <span class="badge bg-primary fs-6">@Model.UserLoyaltySegments.RegularUsers</span>
                                            <div class="small text-muted">Regular (5-14 visits)</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <span class="badge bg-warning fs-6">@Model.UserLoyaltySegments.OccasionalUsers</span>
                                            <div class="small text-muted">Occasional (1-4 visits)</div>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <span class="badge bg-secondary fs-6">@Model.UserLoyaltySegments.InactiveUsers</span>
                                            <div class="small text-muted">Inactive (0 visits)</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Drop-off Analysis -->
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-graph-down-arrow"></i> User Drop-off Analysis</h5>
                                <small class="text-muted">Users who haven't checked in recently</small>
                            </div>
                            <div class="card-body">
                                <div id="dropoffAnalysis">
                                    @foreach (var period in Model.DropoffAnalysis.DropoffPeriods)
                                    {
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <div>
                                                <strong>@period.Period</strong>
                                                <small class="text-muted d-block">@period.DroppedOffUsers users</small>
                                            </div>
                                            <div class="text-end">
                                                <span class="badge bg-danger">@period.DropoffPercentage.ToString("F1")%</span>
                                            </div>
                                        </div>
                                        <div class="progress mb-3" style="height: 8px;">
                                            <div class="progress-bar bg-danger" style="width: @period.DropoffPercentage%"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Utilization Tab - Lazy loaded -->
            <div class="tab-pane fade" id="utilization" role="tabpanel">
                <div id="utilizationContent">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading utilization data...</p>
                    </div>
                </div>
            </div>

            <!-- Trends Tab - Lazy loaded -->
            <div class="tab-pane fade" id="trends" role="tabpanel">
                <div id="trendsContent">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading trends data...</p>
                    </div>
                </div>
            </div>

            <!-- Branch Analytics Tab - Lazy loaded -->
            <div class="tab-pane fade" id="branches" role="tabpanel">
                <div id="branchContent">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading branch analytics...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Store analytics data (only initially loaded data)
        const analyticsData = @Html.Raw(Json.Serialize(Model));
        
        // Lazy loading flags
        let utilizationLoaded = false;
        let trendsLoaded = false;
        let branchLoaded = false;
        
        // Store lazy-loaded data
        let utilizationData = null;
        let trendsData = null;
        let branchData = null;
        let multiBranchData = null;
        
        // Initialize charts when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            initializeLoyaltyChart();
        });

        // Lazy loading functions
        function loadUtilizationData() {
            if (utilizationLoaded) return;
            
            Promise.all([
                fetch('@Url.Action("GetSubscriptionUtilization")').then(r => r.json()),
                fetch('@Url.Action("GetMultiBranchUsage")').then(r => r.json())
            ]).then(([utilResponse, multiBranchResponse]) => {
                if (utilResponse.success && multiBranchResponse.success) {
                    utilizationData = utilResponse.data;
                    multiBranchData = multiBranchResponse.data;
                    renderUtilizationTab();
                    utilizationLoaded = true;
                } else {
                    showError('utilizationContent', 'Failed to load utilization data');
                }
            }).catch(error => {
                console.error('Error loading utilization data:', error);
                showError('utilizationContent', 'Error loading utilization data');
            });
        }

        function loadTrendsData() {
            if (trendsLoaded) return;
            
            fetch('@Url.Action("GetCheckInTrends")')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        trendsData = data.data;
                        renderTrendsTab();
                        trendsLoaded = true;
                    } else {
                        showError('trendsContent', 'Failed to load trends data');
                    }
                })
                .catch(error => {
                    console.error('Error loading trends data:', error);
                    showError('trendsContent', 'Error loading trends data');
                });
        }

        function loadBranchData() {
            if (branchLoaded) return;
            
            
                fetch('@Url.Action("GetBranchPerformance")').then(r => r.json())
            .then((perfResponse) => {
                if (perfResponse.success ) {
                    branchData = {
                        performance: perfResponse.data
                    };
                    renderBranchTab();
                    branchLoaded = true;
                } else {
                    showError('branchContent', 'Failed to load branch analytics');
                }
            }).catch(error => {
                console.error('Error loading branch data:', error);
                showError('branchContent', 'Error loading branch analytics');
            });
        }

        // Rendering functions
        function renderUtilizationTab() {
            const content = document.getElementById('utilizationContent');
            content.innerHTML = `
                <div class="row">
                    <!-- Subscription Utilization -->
                    <div class="col-md-8">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-speedometer"></i> Subscription Utilization</h5>
                                <small class="text-muted">How much users utilize their subscription period</small>
                            </div>
                            <div class="card-body">
                                <div class="row mb-4">
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h3 class="text-primary">${utilizationData.averageUtilization.toFixed(1)}%</h3>
                                            <small class="text-muted">Average Utilization</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h3 class="text-success">${utilizationData.highUtilizers}</h3>
                                            <small class="text-muted">High Utilizers (80%+)</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h3 class="text-warning">${utilizationData.lowUtilizers}</h3>
                                            <small class="text-muted">Low Utilizers (<20%)</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <h3 class="text-info">${utilizationData.totalUsers}</h3>
                                            <small class="text-muted">Total Users</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <h6>Top Utilizers</h6>
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>User</th>
                                                <th>Used Days</th>
                                                <th>Total Days</th>
                                                <th>Utilization</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${utilizationData.userUtilizations.slice(0, 5).map(user => `
                                                <tr>
                                                    <td>${user.userName}</td>
                                                    <td>${user.usedDays}</td>
                                                    <td>${user.totalDays}</td>
                                                    <td>
                                                        <span class="badge bg-${user.utilizationPercentage >= 80 ? 'success' : user.utilizationPercentage >= 50 ? 'warning' : 'danger'}">
                                                            ${user.utilizationPercentage.toFixed(1)}%
                                                        </span>
                                                    </td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Multi-Branch Usage -->
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-diagram-3"></i> Multi-Branch Usage</h5>
                                <small class="text-muted">Users visiting multiple branches</small>
                            </div>
                            <div class="card-body">
                                <canvas id="multiBranchChart" width="300" height="200"></canvas>
                                <div class="mt-3">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Single Branch Users:</span>
                                        <strong>${multiBranchData.singleBranchUsers}</strong>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Multi-Branch Users:</span>
                                        <strong>${multiBranchData.multiBranchUsers}</strong>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Max Branches Used:</span>
                                        <strong>${multiBranchData.maxBranchesUsed}</strong>
                                    </div>
                                </div>
                                
                                ${multiBranchData.topMultiBranchUsers.length > 0 ? `
                                    <hr>
                                    <h6>Top Multi-Branch Users</h6>
                                    ${multiBranchData.topMultiBranchUsers.slice(0, 3).map(user => `
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>${user.userName}</span>
                                            <span class="badge bg-info">${user.branchCount} branches</span>
                                        </div>
                                    `).join('')}
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Initialize multi-branch chart
            initializeMultiBranchChart();
        }

        function renderTrendsTab() {
            const content = document.getElementById('trendsContent');
            content.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-graph-up"></i> Check-in Trends</h5>
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="trendPeriod" id="trend7days" autocomplete="off" checked>
                                <label class="btn btn-outline-primary btn-sm" for="trend7days">7 Days</label>

                                <input type="radio" class="btn-check" name="trendPeriod" id="trend30days" autocomplete="off">
                                <label class="btn btn-outline-primary btn-sm" for="trend30days">30 Days</label>

                                <input type="radio" class="btn-check" name="trendPeriod" id="trend90days" autocomplete="off">
                                <label class="btn btn-outline-primary btn-sm" for="trend90days">90 Days</label>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="trendsChart" width="800" height="300"></canvas>
                    </div>
                </div>
            `;
            
            // Initialize trends chart
            initializeTrendsChart();
        }

        function renderBranchTab() {
            const content = document.getElementById('branchContent');
            content.innerHTML = `
                <div class="row">
                    <!-- Branch Performance -->
                    <div class="col-md-12">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="bi bi-building"></i> Branch Performance</h5>
                                <small class="text-muted">${branchData.performance.analysisPeriod || 'Last 30 days'}</small>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Branch</th>
                                                <th>Today</th>
                                                <th>Last 30 Days</th>
                                                <th>Unique Users</th>
                                                <th>Avg/Day</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${branchData.performance.branchPerformances.sort((a, b) => b.checkInsLast30Days - a.checkInsLast30Days).map(branch => `
                                                <tr>
                                                    <td><strong>${branch.branchName}</strong></td>
                                                    <td>
                                                        <span class="badge bg-info">${branch.todayCheckIns}</span>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-primary">${branch.checkInsLast30Days}</span>
                                                    </td>
                                                    <td>${branch.uniqueUsersLast30Days}</td>
                                                    <td>${branch.avgCheckInsPerDay.toFixed(1)}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function showError(contentId, message) {
            const content = document.getElementById(contentId);
            content.innerHTML = `
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle text-danger fs-1"></i>
                    <h5 class="mt-3">Error Loading Data</h5>
                    <p class="text-muted">${message}</p>
                    <button class="btn btn-outline-primary" onclick="location.reload()">
                        <i class="bi bi-arrow-clockwise"></i> Retry
                    </button>
                </div>
            `;
        }

        // Chart initialization functions
        function initializeLoyaltyChart() {
            const ctx = document.getElementById('loyaltyChart').getContext('2d');
            const data = analyticsData.userLoyaltySegments;
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['VIP Users', 'Regular Users', 'Occasional Users', 'Inactive Users'],
                    datasets: [{
                        data: [data.vipUsers, data.regularUsers, data.occasionalUsers, data.inactiveUsers],
                        backgroundColor: ['#198754', '#0d6efd', '#ffc107', '#6c757d'],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: false,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        }
                    }
                }
            });
        }

        function initializeMultiBranchChart() {
            const ctx = document.getElementById('multiBranchChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Single Branch', 'Multi-Branch'],
                    datasets: [{
                        data: [multiBranchData.singleBranchUsers, multiBranchData.multiBranchUsers],
                        backgroundColor: ['#0d6efd', '#fd7e14'],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: false,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        let trendsChart;
        function initializeTrendsChart() {
            const ctx = document.getElementById('trendsChart').getContext('2d');
            const data = trendsData.last7Days;
            
            trendsChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(d => d.label),
                    datasets: [{
                        label: 'Check-ins',
                        data: data.map(d => d.checkIns),
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
            
            // Set up trend period change handlers
            document.querySelectorAll('input[name="trendPeriod"]').forEach(radio => {
                radio.addEventListener('change', updateTrendsChart);
            });
        }

        function updateTrendsChart() {
            const selectedPeriod = document.querySelector('input[name="trendPeriod"]:checked').id;
            let data;
            
            switch(selectedPeriod) {
                case 'trend7days':
                    data = trendsData.last7Days;
                    break;
                case 'trend30days':
                    data = trendsData.last30Days;
                    break;
                case 'trend90days':
                    data = trendsData.last90Days;
                    break;
                default:
                    data = trendsData.last7Days;
            }
            
            trendsChart.data.labels = data.map(d => d.label);
            trendsChart.data.datasets[0].data = data.map(d => d.checkIns);
            trendsChart.update();
        }

        function getChartColor(index, alpha = 1) {
            const colors = [
                `rgba(13, 110, 253, ${alpha})`,    // blue
                `rgba(25, 135, 84, ${alpha})`,     // green
                `rgba(255, 193, 7, ${alpha})`,     // yellow
                `rgba(220, 53, 69, ${alpha})`,     // red
                `rgba(13, 202, 240, ${alpha})`,    // cyan
                `rgba(111, 66, 193, ${alpha})`     // purple
            ];
            return colors[index % colors.length];
        }

        function refreshAllAnalytics() {
            // Show loading spinner
            const refreshBtn = document.querySelector('button[onclick="refreshAllAnalytics()"]');
            const originalText = refreshBtn.innerHTML;
            refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise spin"></i> Refreshing...';
            refreshBtn.disabled = true;

            // Reset lazy loading flags
            utilizationLoaded = false;
            trendsLoaded = false;
            branchLoaded = false;

            // Reload the page to get fresh data
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }

        // Add CSS for spinner animation
        const style = document.createElement('style');
        style.textContent = `
            .spin {
                animation: spin 1s linear infinite;
            }
            @@keyframes spin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            .alert {
                border-radius: 8px;
                margin-bottom: 1rem;
            }
            .progress {
                border-radius: 10px;
            }
            .card {
                box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
                border-radius: 10px;
            }
            .nav-tabs .nav-link {
                border-radius: 8px 8px 0 0;
            }
            .nav-tabs .nav-link.active {
                font-weight: 600;
            }
            .badge {
                font-size: 0.8em;
            }
        `;
        document.head.appendChild(style);
    </script>
}